###########################
# this file should be imported in /etc/caddy/Caddyfile
# after any change is done here. we should reload the caddy service: `sudo systemctl reload caddy`
###########################


###########################
# webapp routes in dev: handled by vite dev server
###########################

handle /* {
	#respond "handle /* @ {time.now.unix}" 200
	skip_log
	reverse_proxy http://localhost:{args[0]}
}

# static routes relative to the webapp: option 1 - handled by caddy

handle /static-prefix/* {
	#respond "handle /static-prefix/* @ {time.now.unix}" 200

	uri strip_prefix /static-prefix
	file_server {
		# since we are using uri strip_prefix, the argument for root should be 
		# the full path to the directory
		root {args[2]}/packages/webapp/static/static-prefix
		browse
	}
}

# static routes relative to the webapp: option 2 - handled by vite dev server

#handle /static-prefix/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}



###########################
# api routes in dev
###########################

handle /api/v1 {
	#respond "handle /api/v1 @ {time.now.unix}" 200
	skip_log
	reverse_proxy http://localhost:{args[1]}
}

handle /api/v1/* {
	#respond "handle /api/v1/* @ {time.now.unix}" 200
	skip_log
	reverse_proxy http://localhost:{args[1]}
}



###########################
# directories with static files that should be served by caddy directly
###########################

handle /upload {
	#respond "handle /upload @ {time.now.unix}" 200

	#uri strip_prefix /upload
	file_server {
		# since we are using uri strip_prefix, the argument for root should be 
		# the full path to the directory: /path/to/root/upload
		root {args[2]}/upload
		browse
	}
}

handle /upload/* {
	#respond "handle /upload/* @ {time.now.unix}" 200

	#uri strip_prefix /upload
	file_server {
		# since we are using uri strip_prefix, the argument for root should be 
		# the full path to the directory: /path/to/root/upload
		root {args[2]}/upload
		browse
	}
}



###########################
# special paths related to the vite/sveltekit dev server 
# TODO: can we do something in vite to have some kind of prefix?
# NOTE: after the update this doesn't seem to be necessary anymore
###########################

#
#handle /@fs/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}
#
#handle /@vite/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}
#
#handle /@id/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}
#
#handle /node_modules/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}
#
#handle /.svelte-kit/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}
#
#handle /src/* {
#	skip_log
#	reverse_proxy http://localhost:{args[0]}
#}
#


############################
# debug
############################

handle /caddy-ping/* {
	respond "

===
placeholders reference: https://caddyserver.com/docs/caddyfile/concepts#placeholders

hostname: {system.hostname} 
wd: {system.wd}
system: {system.arch}-{system.os}
remote_host: {remote_host}
client_ip: {client_ip}
dir: {dir}
file.base: {file.base}
file.ext: {file.ext}
file: {file}
host: {host}
hostport: {hostport}
method: {method}
path: {path}
path.x: {path.x}
path.0: {path.0}
path.1: {path.1}
port: {port}
query: {query}
remote_host: {remote_host}
remote_port: {remote_port}
remote: {remote}
scheme: {scheme}
tls_cipher: {tls_cipher}
tls_client_certificate_der_base64: {tls_client_certificate_der_base64}
tls_client_certificate_pem: {tls_client_certificate_pem}
tls_client_fingerprint: {tls_client_fingerprint}
tls_client_issuer: {tls_client_issuer}
tls_client_serial: {tls_client_serial}
tls_client_subject: {tls_client_subject}
tls_version: {tls_version}
upstream_hostport: {upstream_hostport}
uri: {uri}
===

	" 200
}
